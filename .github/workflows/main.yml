name: Build & Test
on:
  push:
    branches: [ develop ]
  workflow_dispatch:
  pull_request:

jobs:
  checkAndUnitTest:
    name: Check and Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version-file: ./.java-version

      - name: Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/modules-*
            ~/.gradle/caches/jars-*
            ~/.gradle/caches/build-cache-*
          key: gradle-${{ hashFiles('**/build.gradle*', '**/libs.versions.toml') }}

      - name: Gradle Wrapper Cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: Download dependencies
        run: ./gradlew dependencies

      - name: Check :app
        run: ./gradlew :app:check

      - name: Archive App Test results
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: app-test-results
          path: |
            "**/build/reports"
            "**/build/test-results"


  connectedAndroidTest:
    needs: checkAndUnitTest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        api-level: [ 27, 35 ]
        target: [ google_apis ]
        profile: [ "pixel", "pixel_c" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version-file: ./.java-version

      - name: Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches/modules-*
            ~/.gradle/caches/jars-*
            ~/.gradle/caches/build-cache-*
          key: gradle-${{ hashFiles('**/build.gradle*', '**/libs.versions.toml') }}

      - name: Gradle Wrapper Cache
        uses: actions/cache@v4
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.profile }}-${{ matrix.api-level < 28 && 'x86' || 'x86_64' }}

      - name: create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          profile: ${{ matrix.profile }}
          arch: ${{ matrix.api-level < 28 && 'x86' || 'x86_64' }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Build AndroidTest apps
        run: ./gradlew :app:packageDebug :app:packageDebugAndroidTest

      - name: Run connected tests
        uses: ReactiveCircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          profile: ${{ matrix.profile }}
          arch: ${{ matrix.api-level < 28 && 'x86' || 'x86_64' }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck

      - name: Upload test reports
        if: ${{ success() || failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.api-level }}-${{ matrix.target }}-${{ matrix.profile }}-${{ matrix.api-level < 28 && 'x86' || 'x86_64' }}
          path: "**/build/reports/androidTests"

  # TODO action consistently fails with "This is because the emulator closed unexpectedly (134)`
  # https://issuetracker.google.com/issues/287312019
#  managedDevicesAndroidAppTest:
#    name: Run Android Instrumentation Tests
#    needs: checkAndUnitTest
#    runs-on: ubuntu-latest
#    steps:
#      # needed to run managed devices
#      # see https://issuetracker.google.com/issues/287312019
#      - name: Enable KVM group perms
#        run: |
#          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
#          sudo udevadm control --reload-rules
#          sudo udevadm trigger --name-match=kvm
#          ls /dev/kvm
#
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up JDK
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'zulu'
#          java-version-file: ./.java-version
#
#      - name: Gradle Cache
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches/modules-*
#            ~/.gradle/caches/jars-*
#            ~/.gradle/caches/build-cache-*
#          key: gradle-${{ hashFiles('**/build.gradle*', '**/libs.versions.toml') }}
#
#      - name: Gradle Wrapper Cache
#        uses: actions/cache@v4
#        with:
#          path: ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}
#
#      - name: Accept Android Package Licenses
#        run: yes | "$ANDROID_HOME"/cmdline-tools/latest/bin/sdkmanager --licenses || true
#
#      - name: Build AndroidTest apps
#        run: ./gradlew :app:packageDebug :app:packageDebugAndroidTest
#
#      - name: Run instrumented tests
#        run: ./gradlew cleanManagedDevices --unused-only &&
#          ./gradlew :app:pixel2targetApiDebugAndroidTest -Dorg.gradle.workers.max=1
#          -Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect -Pandroid.experimental.testOptions.managedDevices.emulator.showKernelLogging=true -Pandroid.experimental.testOptions.managedDevices.maxConcurrentDevices=1 -Pandroid.experimental.testOptions.managedDevices.setupTimeoutMinutes=180
#
#      - name: Upload test reports
#        if: ${{ success() || failure() }}
#        uses: actions/upload-artifact@v4
#        with:
#          name: test-reports
#          path: "**/build/reports/androidTests"
